---

# version = "1.1.24"

# A description of the various items is provided at the end of this file.

- item: defaults
  # Colors
  bg: white
  abg: gray
  fg: black
  # afg: black                # non-existent means same as fg
  selectcolor: red            # inherited by radiobutton

  # Font used for labels
  label_font: { family: Helvetica, size: 10, weight: normal }
  # Font used for buttons and other controls
  button_font: { family: Helvetica, size: 10, weight: normal }

# Ports:
#   9200: unauthenticated, unencrypted
#   9205: authenticated, unencrypted
#   9204; authenticated, encrypted (not yet supported)
# Ports 9204 and 9205 require the K4 to accept remote client(s)
# and the program will request the K4's remote password.
#
- item: server
  name: k4
  type: k4
  address: K4-SNxxxxx.local      # match your serial number in the string
  port: 9205
  startup: TS1;                   # Set test mode
  connect_on_start: True

- item: page
  name: main
  server: k4
  contains: #{
    #include main-tab-group
    #include receive-tab-group
    #include transmit-tab-group
    #include equalizers-tab-group
    #include misc-tab-group
    #include app-settings-tab-group
  #}
#}

#define main-tab-group
- item: group
  tabname: Main
  contains: #{
    #include main-tab-column-1
    #include main-tab-column-2
    #}
#end

#define misc-tab-group
- item: group
  tabname: Misc
  contains: #{
    #include menu
    #include sw-release-group
  #}
#end

#define receive-tab-group
- item: group
  tabname: Receive
  columns: 1
  contains: #{
    #include receive-tab-row-one-group
    #include receive-tab-row-two-group
  #}
#end

#define transmit-tab-group
- item: group
  tabname: Transmit
  contains: #{
    #include essb-togglebutton
    #include ssb-bandwidth-slider
    #include compression-level-slider
    #include mic-gain-slider
    #include voice-monitor-level-slider
    #include ctcss-group
  #}
#end

#define equalizers-tab-group
- item: group
  tabname: Equalizers
  contains: #{
    #include equalizers
  #}
#end

#define app-settings-tab-group
- item: group
  tabname: App
  contains: #{
    #include app-settings
  #}
#end

#define main-tab-column-1
- item: group # Column 1
  columns: 1
  contains: #{
    #include receiver-a-group
    - item: group
      contains: #{
        #include receive-transmit-togglebutton
        #include test-mode-togglebutton
      #}
    #include vfos-control-group
    - item: group
      contains: #{
        - item: group
          label: ATU
          contains: #{
            #include atu-bypass-togglebutton
            #include atu-tune-togglebutton
            #include atu-extended-tune-togglebutton
            #}
        #}
    - item: group
      contains: #{
        - item: group
          label: Tune
          contains: #{
            #include tune-button
            #include tune-lp-togglebutton
          #}
      #}
  #}
#end

#define main-tab-column-2
- item: group # Column 2
  columns: 1
  contains: #{
    #include receiver-b-group
    - item: group
      columns: 1
      contains: #{
        - item: group
          contains: #{
            #include volume-sliders-group
            #include keyer-speed-slider-group
            #include power-slider-group
          #}
        - item: group
          contains: #{
            #include audio-mx-togglebutton
            #include autospot-button
          #}
        - item: group
          label: ''
          contains: #{
            #include k4-power-off-button
            #include exit-button
          #}
      #}
  #}
#end

#define receive-tab-row-one-group
- item: group
  contains: #{
    #include agc-group
    #include apf-group
    #include auto-notch-group
    #include audio-effects-togglebutton
  #}
#end

#define receive-tab-row-two-group
- item: group
  contains: #{
    #include af-limiter-slider
    #include cw-pitch-slider
    #include af-center-pitch-group
    #include noise-blanker-group
    #include noise-reduction-group
  #}
#end

#define volume-sliders-group
- item: group
  label: Volume
  contains: #{
    #include main-volume-slider
    #include sub-volume-slider
    #include sidetone-slider
  #}
#end

#define menu
- item: menu
  label: Menu
  entries_displayed: 18
  selectbg: pink
#end

#define app-settings
- item: appsettings
  selectbg: pink
#end

#define receiver-a-group
- item: group
  label: VFO A
  columns: 1
  contains: #{
    #include vfo-a
    #include s-meter-a-bargraph
    #include rf-out-alc-group
    #include receiver-a-controls-group
  #}
#end

#define rf-out-alc-group
- item: group
  contains: #{
    #include rf-out-bargraph
    #include alc-bargraph
  #}
#end

#define receiver-a-controls-group
- item: group
  columns: 3
  childwidth: 7
  contains: #{
    #include band-a-dropdown-button
    #include mode-a-dropdown-button
    #include bandwidth-a-dropdown-button
    #include preamp-a-dropdown-button
    #include atten-a-dropdown-button
    #include rfgain-a-dropdown-button
  #}
#end

#define vfo-a
- { item: vfo, AorB: A, width: 9, font: { family: Helvetica, size: 19, weight: normal }, activecolor: pink, transmitcolor: red }
#end

#define s-meter-a-bargraph
- item: bargraph
  leading: 1
  maximum: 42
  lengthpercent: 96
  cmd: SM1;
  font: { family: DejaVu Sans Mono, size: 6, weight: normal }
  lefttext: ' '
  bottomtext: "S1 2 3 4 5 6 7 8 9  +10 +20 +30 +40 +50 +60"
  response: SM;
  evalresponse: '0 if len(value) < 4 else value.rstrip(";")[2:]'
#end

#define rf-out-bargraph
- item: bargraph
  label: Power out
  evalmaximum: "0 if len(self.k4param('PC')) < 4 else 11.7 if self.k4param('PC')[3] == 'L' else 117"
  lengthpercent: 100
  cmd: TM1;PC;
  font: { family: DejaVu Sans Mono, size: 6, weight: normal }
  lefttext: ''
  evalbottomtext: "'' if len(self.k4param('PC')) < 4 else '0    2    4    6    8   10    ' if self.k4param('PC')[3] == 'L' else '0   20   40   60   80  100    '"
  evalresponse: "0 if len(self.k4param('TM')) < 4 or len(self.k4param('PC')) < 4 else float(self.k4param('TM')[6:9])/10 if self.k4param('PC')[3] == 'L' else self.k4param('TM')[6:9]"
#end

#define alc-bargraph
- item: bargraph
  label: ALC
  maximum: 8
  lengthpercent: 100
  cmd: TM1;
  font: { family: DejaVu Sans Mono, size: 6, weight: normal }
  lefttext: ''
  bottomtext: "1  3  5  7"
  evalresponse: "0 if len(self.k4param('TM')) < 4 else float(self.k4param('TM')[0:3])"
#end

#define cmp-bargraph
- item: bargraph
  label: CMP
  maximum: 32
  lengthpercent: 100
  cmd: TM1;
  font: { family: DejaVu Sans Mono, size: 6, weight: normal }
  lefttext: ''
  bottomtext: "0 10 20 30"
  evalresponse: "0 if len(self.k4param('TM')) < 4 else float(self.k4param('TM')[3:6])"
#end

#define swr-bargraph
- item: bargraph
  label: SWR
  maximum: 35
  lengthpercent: 100
  cmd: TM1;TQ;TU;
  font: { family: DejaVu Sans Mono, size: 6, weight: normal }
  lefttext: ' '
  bottomtext: "1:1       2:1       3:1    "
  evalresponse: "0 if (len(self.k4param('TM')) < 4) or (self.k4param('TU') == None) or ((self.k4param('TQ') == '0') and (self.k4param('TU') == '0')) else float(self.k4param('TM')[9:12])-10"
#end

#define band-a-dropdown-button
- item: dropdownbutton
  label: Band
  selections: #{
    - { text: "  6 m", cmd: BN10; }
    - { text: " 10 m", cmd: BN09; }
    - { text: " 12 m", cmd: BN08; }
    - { text: " 15 m", cmd: BN07; }
    - { text: " 17 m", cmd: BN06; }
    - { text: " 20 m", cmd: BN05; }
    - { text: " 30 m", cmd: BN04; }
    - { text: " 40 m", cmd: BN03; }
    - { text: " 60 m", cmd: BN02; }
    - { text: " 80 m", cmd: BN01; }
    - { text: "160 m", cmd: BN00; }
  #}
#end

#define mode-a-dropdown-button
- item: dropdownbutton
  label: Mode
  selections: #{
    - { text: "  CW", cmd: MD3; }
    - { text: " USB", cmd: MD2; }
    - { text: " LSB", cmd: MD1; }
    - { text: "  AM", cmd: MD5; }
    - { text: "  FM", cmd: MD4; }
    - { text: "DATA", cmd: MD6; }
  #}
#end

#define bandwidth-a-dropdown-button
- item: dropdownbutton
  label: BW
  unexpectedresponse: 'str((float(value[2:6])*10))[0:3]+" Hz" if value[2:4]=="00" else "{a:.2f}".format(a=float(value[2:6])/100)+" kHz"'
  selections: #{
    - { text: "   50 Hz", cmd: BW0005; }
    - { text: "  100 Hz", cmd: BW0010; }
    - { text: "  200 Hz", cmd: BW0020; }
    - { text: "  300 Hz", cmd: BW0030; }
    - { text: "  400 Hz", cmd: BW0040; }
    - { text: "  450 Hz", cmd: BW0045; }
    - { text: "  500 Hz", cmd: BW0050; }
    - { text: "1.80 kHz", cmd: BW0180; }
    - { text: "2.50 kHz", cmd: BW0250; }
    - { text: "3.50 kHz", cmd: BW0350; }
    - { text: "4.00 kHz", cmd: BW0400; }
    - { text: "5.00 kHz", cmd: BW0500; }
  #}
#end

#define preamp-a-dropdown-button
- item: dropdownbutton
  label: Preamp
  selections: #{
    - { text: "0", cmd: PA00; }
    - { text: "1", cmd: PA11; }
    - { text: "2", cmd: PA21; }
    - { text: "3", cmd: PA31; }
  #}
#end

#define atten-a-dropdown-button
- item: dropdownbutton
  label: Attenuation
  selections: #{
    - { text: " 0 dB", cmd: RA000; }
    - { text: " 3 dB", cmd: RA031; }
    - { text: " 6 dB", cmd: RA061; }
    - { text: " 9 dB", cmd: RA091; }
    - { text: "12 dB", cmd: RA121; }
    - { text: "15 dB", cmd: RA151; }
    - { text: "18 dB", cmd: RA181; }
    - { text: "21 dB", cmd: RA211; }
  #}
#end

#define rfgain-a-dropdown-button
- item: dropdownbutton
  label: RF Gain
  selections: #{
    - { text: " -0 ", cmd: RG-00; }
    - { text: "-10 ", cmd: RG-10; }
  #}
#end

#define receiver-b-group
- item: group
  label: VFO B
  columns: 1
  contains: #{
  #include vfo-b
  #include s-meter-b-bargraph
  #include swr-and-cmd-group
  #include receiver-b-controls-group
    #}
  #}
#end

#define receiver-b-controls-group
- item: group
  columns: 3
  childwidth: 7
  contains: #{
    #include band-b-dropdown-button
    #include mode-B-dropdown-button
    #include bandwidth-B-dropdown-button
    #include preamb-B-dropdown-button
    #include atten-B-dropdown-button
    #include rfgain-B-dropdown-button
#end

#define swr-and-cmd-group
- item: group
  contains: #{
    #include swr-bargraph
    #include cmp-bargraph
  #}
#end

#define vfo-b
- { item: vfo, AorB: B, width: 9, font: { family: Helvetica, size: 19, weight: normal }, activecolor: pink, transmitcolor: red }
#end

#define s-meter-b-bargraph
- item: bargraph
  leading: 1
  maximum: 42
  lengthpercent: 96
  cmd: SM1;
  font: { family: DejaVu Sans Mono, size: 6, weight: normal }
  lefttext: ' '
  bottomtext: "S1 2 3 4 5 6 7 8 9  +10 +20 +30 +40 +50 +60"
  response: SM$;
  evalresponse: '0 if len(value) < 5 else value.rstrip(";")[3:]'
#end

#define band-b-dropdown-button
- item: dropdownbutton
  label: Band
  selections: #{
    - { text: "  6 m", cmd: BN$10; }
    - { text: " 10 m", cmd: BN$09; }
    - { text: " 12 m", cmd: BN$08; }
    - { text: " 15 m", cmd: BN$07; }
    - { text: " 17 m", cmd: BN$06; }
    - { text: " 20 m", cmd: BN$05; }
    - { text: " 30 m", cmd: BN$04; }
    - { text: " 40 m", cmd: BN$03; }
    - { text: " 60 m", cmd: BN$02; }
    - { text: " 80 m", cmd: BN$01; }
    - { text: "160 m", cmd: BN$00; }
  #}
#end

#define mode-B-dropdown-button
- item: dropdownbutton
  label: Mode
  selections: #{
    - { text: "  CW", cmd: MD$3; }
    - { text: " USB", cmd: MD$2; }
    - { text: " LSB", cmd: MD$1; }
    - { text: "  AM", cmd: MD$5; }
    - { text: "  FM", cmd: MD$4; }
    - { text: "DATA", cmd: MD$6; }
  #}
#end

#define bandwidth-B-dropdown-button
- item: dropdownbutton
  label: BW
  unexpectedresponse: 'str((float(value[3:7])*10))[0:3]+" Hz" if value[2:4]=="00" else "{a:.2f}".format(a=float(value[3:7])/100)+" kHz"'
  selections: #{
    - { text: "   50 Hz", cmd: BW$0005; }
    - { text: "  100 Hz", cmd: BW$0010; }
    - { text: "  200 Hz", cmd: BW$0020; }
    - { text: "  300 Hz", cmd: BW$0030; }
    - { text: "  400 Hz", cmd: BW$0040; }
    - { text: "  450 Hz", cmd: BW$0045; }
    - { text: "  500 Hz", cmd: BW$0050; }
    - { text: "1.80 kHz", cmd: BW$0180; }
    - { text: "2.50 kHz", cmd: BW$0250; }
    - { text: "3.50 kHz", cmd: BW$0350; }
    - { text: "4.00 kHz", cmd: BW$0400; }
  #}
#end

#define preamb-B-dropdown-button
- item: dropdownbutton
  label: Preamp
  selections: #{
    - { text: "0", cmd: PA$00; }
    - { text: "1", cmd: PA$11; }
    - { text: "2", cmd: PA$21; }
    - { text: "3", cmd: PA$31; }
  #}
#end

#define atten-B-dropdown-button
- item: dropdownbutton
  label: Attenuation
  selections: #{
    - { text: " 0 dB", cmd: RA$000; }
    - { text: " 3 dB", cmd: RA$031; }
    - { text: " 6 dB", cmd: RA$061; }
    - { text: " 9 dB", cmd: RA$091; }
    - { text: "12 dB", cmd: RA$121; }
    - { text: "15 dB", cmd: RA$151; }
    - { text: "18 dB", cmd: RA$181; }
    - { text: "21 dB", cmd: RA$211; }
  #}
#end

#define rfgain-B-dropdown-button
- item: dropdownbutton
  label: RF Gain
  selections: #{
    - { text: " -0 ", cmd: RG$-00; }
    - { text: "-10 ", cmd: RG$-10; }
  #}
#end

#define vfos-control-group
- item: group
  label: VFOs
  columns: 3
  contains: #{
    #include vfos-linked-togglebutton
    #include split-togglebutton
    #include sub-receiver-togglebutton
    #include AB-swap-buttons
  #}
#end

#define vfos-linked-togglebutton
- item: togglebutton
  selections: #{
  - { text: "  Linked", cmd: FT0;BI0;#DPM0; }
  - { text: "Unlinked", cmd: FT0;BI1;#DPM2; }
  #}
#end

#define vfos-locked-togglebutton
- item: togglebutton
  selections: #{
  - { text: "  Locked", cmd: LK1;LK$1;, }
  - { text: "Unlocked", cmd: LK0;LK$0;, }
  #}
#end

#define test-mode-togglebutton
- item: togglebutton
  label: Tx
  selections: #{
    - { text: "Test On",  cmd: TS1;, bg: red, abg: red }
    - { text: "Test Off", cmd: TS0;,  }
  #}
#end

#define power-dropdown-button
- item: dropdownbutton
  label: Power
  width: 6
  unexpectedresponse: 'str("" if len(value) < 5 else float(value[2:5])/10 if value[5] == "L" else float(value[2:5])/10000 if value[5] == "X" else float(value[2:5])) + " W"'
  selections: #{
    - { text: "  5 W", cmd: PC050L; }
    - { text: " 10 W", cmd: PC100L; }
    - { text: " 25 W", cmd: PC025H; }
    - { text: " 50 W", cmd: PC050H; }
    - { text: " 75 W", cmd: PC075H; }
    - { text: "100 W", cmd: PC100H; }
  #}
#end

#define power-slider-group
- item: group
  label: Power
  contains: #{
    #include power-slider
  #}
#end

#define power-slider
- item: slider
  label: (Watts)
  orient: vertical
  from: 110.0
  to: 0.0
  length: 150
  evalincrement: '.0001 if value > 0.0 and value <= .01 else .1 if value <= 10.0 else 1.0'
  evalcmd: '"PC{:03d}L;".format(int(float(value)*10)) if float(value) <= 10.0 else "PC{:03d}H;".format(int(value))'
  evalresponse: '0 if len(value) < 5 else float(value[2:5])/10 if value[5] == "L" else float(value[2:5])/10000 if value[5] == "X" else float(value[2:5])'
#end

#define main-volume-slider
- item: slider
  label: Main
  orient: vertical
  from: 60
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"AG{:03d};".format(int(value))'
  evalresponse: 'float(value[2:5])'
#end

#define sub-volume-slider
- item: slider
  label: Sub
  orient: vertical
  from: 60
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"AG${:03d};".format(int(value))'
  evalresponse: 'float(value[3:6])'
#end

#define sidetone-slider
- item: slider
  label: Sidetone
  orient: vertical
  from: 60
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"ML0{:03d};".format(int(float(value)))'
  evalresponse: 'float(value[3:6]) if value[2] == "0" else -1'
#end

#define keyer-speed-slider-group
- item: group
  label: Keyer
  contains: #{
    #include keyer-speed-slider
  #}
#end

#define keyer-speed-slider
- item: slider
  label: Speed
  orient: vertical
  from: 100
  to: 8
  length: 150
  evalincrement: '1'
  evalcmd: '"KS{:03d};".format(int(float(value)))'
  evalresponse: 'float(value[2:5])'
#end

#define atu-bypass-togglebutton
- item: togglebutton
  selections: #{
    - { text: "Bypass", cmd: AT1; }
    - { text: "Auto",   cmd: AT2; }
  #}
#end

#define audio-mx-togglebutton
- item: togglebutton
  label: 'Audio Mix'
  selections: #{
    - { text: "Audio A+B", cmd: MXA.B; }
    - { text: "Audio A",   cmd: MXA.A; }
    - { text: "Audio B",   cmd: MXB.B; }
  #}
#end

#define atu-tune-togglebutton
- item: togglebutton
  selections: #{
  - { text: "Tune", cmd: TU3;, bg: red }
  - { text: "Tune", cmd: TU0; }
  #}
#end

#define atu-extended-tune-togglebutton
- item: togglebutton
  selections: #{
    - { text: "TUNE", cmd: TU4;, bg: red }
    - { text: "TUNE", cmd: TU0; }
  #}
#end

#define tune-button
- item: togglebutton
  selections: #{
    - { text: "Tune", cmd: TU1;, bg: red }
    - { text: "Tune", cmd: TU0; }
  #}
#end

#define tune-lp-togglebutton
- item: togglebutton
  selections: #{
    - { text: "Tune LP", cmd: TU2;, bg: red }
    - { text: "Tune LP", cmd: TU0; }
  #}
#end

#define AB-swap-buttons
- { item: button, text: "A/B",      cmd:  AB2; }
- { item: button, text: "A->B",     cmd:  AB0; }
- { item: button, text: "B->A",     cmd:  AB1; }
- { item: button, text: "all A/B",  cmd:  AB5; }
- { item: button, text: "all A->B", cmd:  AB3; }
- { item: button, text: "all B->A", cmd:  AB4; }
#end

#define k4-power-off-button
- { item: button, text: 'Power Off', cmd:  PS0; }
#end

#define autospot-button
- { item: button, label: ' ', text: 'Spot', cmd:  SP3; }
#end

#define connect-togglebutton
- item: togglebutton
  wraparound: False
  selections: #{
    - { text: 'Connect', bg: red, abg: red, blink: on }
    - { text: 'Connecting', cmd: CONNECT!; }
    - { text: 'Connected', response: PONG; }
  #}
#end

#define exit-button
- { item: button, text: 'Exit', cmd: QUIT!; }
#end

#define split-togglebutton
- item: togglebutton
  selections: #{
    - { text: 'Split on',   cmd: FT1;, bg: yellow, abg: yellow }
    - { text: 'Split off', cmd: FT0; }
  #}
#end

#define sub-receiver-togglebutton
- item: togglebutton
  selections: #{
    - { text: 'Div on',   cmd: DV1; }
    - { text: 'Div off',  cmd: DV0;SB1; }
    - { text: 'Sub on',   cmd: DV0;SB1 }
    - { text: 'Sub off' , cmd: SB0; }
  #}
#end

#define receive-transmit-togglebutton
- item: togglebutton
  label: 'Tx/Rx'
  selections: #{
    - { text: 'Receive',   cmd: RX;, bg: white, abg: white, }
    - { text: 'Transmit',  cmd: TX;, bg: red,   abg: red, }
  #}
#end

#define compression-level-slider
- item: slider
  label: CMP
  orient: vertical
  from: 30
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"CP{:03d};".format(int(value))'
  evalresponse: 'float(value[2:5])'
#end

#define essb-togglebutton
- item: togglebutton
  label: ESSB
  selections: #{
    - { text: "On",  cmd: ES1;, evalresponse: 'value[0:3]+";"' } 
    - { text: "Off", cmd: ES0;, evalresponse: 'value[0:3]+";"' }
  #}
#end

#define ssb-bandwidth-slider
- item: slider
  label: SSB BW
  orient: vertical
  from: "4.5 if self.k4param('ES') == None or len(self.k4param('ES')) < 3 or self.k4param('ES')[0] == '1' else 2.8"
  to: "2.4 if self.k4param('ES') == None or len(self.k4param('ES')) < 3 or self.k4param('ES')[0] == '0' else 3.0"
  length: 150
  evalincrement: '0.1'
  evalcmd: '"ES{mode}{bw:02d};".format(mode=1 if value > 2.8 else 0, bw=int(value*10))'
  evalresponse: '-1 if len(value) < 5 else float(value[3:5])/10'
#end

#define af-limiter-slider
- item: slider
  label: AF Limiter
  orient: vertical
  from: 30
  to: 1
  length: 150
  evalincrement: '1'
  evalcmd: '"AL{:02d};".format(int(value))'
  evalresponse: 'float(value[2:4])'
#end

#define apf-group
- item: group
  label: APF
  contains: #{
    #include main-apf-togglebutton
    #include sub-apf-togglebutton
  #}
#end

#define main-apf-togglebutton
- item: togglebutton
  label: Main
  leading: 0
  selections: #{
    - { text:    "Off", cmd: AP00;  }
    - { text:  "30 Hz", cmd: AP10; }
    - { text:  "50 Hz", cmd: AP11; }
    - { text: "150 Hz", cmd: AP12; }
  #}
#end

#define sub-apf-togglebutton
- item: togglebutton
  label: Sub
  leading: 0
  selections: #{
    - { text:    "Off", cmd: AP$00;  }
    - { text:  "30 Hz", cmd: AP$10; }
    - { text:  "50 Hz", cmd: AP$11; }
    - { text: "150 Hz", cmd: AP$12; }
  #}
#end

#define cw-pitch-slider
- item: slider
  label: CW Pitch
  orient: vertical
  from: 900
  to: 300
  length: 150
  evalincrement: '10'
  evalcmd: '"CW{:02d};".format(int(int(value)/10))'
  evalresponse: 'int(value[2:4])*10'
#end

#define audio-effects-togglebutton
- item: togglebutton
  label: Audio Effects
  selections: #{
    - { text: "Off",        cmd: FX0; }
    - { text: "Sim Stereo", cmd: FX1; }
    - { text: "Pitch Map",  cmd: FX2; }
  #}
#end

#define agc-group
- item: group
  label: AGC
  contains: #{
    #include main-agc-togglebutton
    #include sub-agc-togglebutton
  #}
#end

#define main-agc-togglebutton
- item: togglebutton
  label: Main
  leading: 0
  selections: #{
    - { text: "Off",  cmd: GT0; }
    - { text: "Slow", cmd: GT1; }
    - { text: "Fast", cmd: GT2; }
  #}
#end

#define sub-agc-togglebutton
- item: togglebutton
  label: Sub
  leading: 0
  selections: #{
    - { text: "Off",  cmd: GT$0; }
    - { text: "Slow", cmd: GT$1; }
    - { text: "Fast", cmd: GT$2; }
  #}
#end

#define af-center-pitch-group
- item: group
  label: AF Center Pitch
  contains: #{
    #include main-af-center-pitch-group
    #include sub-af-center-pitch-group
  #}
#end

#define main-af-center-pitch-group
- item: group
  columns: 1
  contains: #{
    #include main-af-center-pitch-slider
    #include main-af-center-pitch-normal-button
  #}
#end

#define sub-af-center-pitch-group
- item: group
  columns: 1
  contains: #{
    #include sub-af-center-pitch-slider
    #include sub-af-center-pitch-normal-button
  #}
#end

#define main-af-center-pitch-slider
- item: slider
  label: Main
  leading: 0
  orient: vertical
  from: 3000
  to: 300
  length: 150
  evalincrement: '10'
  evalcmd: '"IS{:04d};".format(int(int(value)/10))'
  evalresponse: 'int(value[2:6])*10'
#end

#define sub-af-center-pitch-slider
- item: slider
  label: Sub
  leading: 0
  orient: vertical
  from: 3000
  to: 300
  length: 150
  evalincrement: '10'
  evalcmd: '"IS${:04d};".format(int(int(value)/10))'
  evalresponse: 'int(value[3:7])*10'
#end

#define main-af-center-pitch-normal-button
- item: button
  text: Normal
  cmd: is9000;
#end

#define sub-af-center-pitch-normal-button
- item: button
  text: Normal
  cmd: is$9000;
#end

#define mic-gain-slider
- item: slider
  label: Mic Gain
  orient: vertical
  from: 80
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"MG{:03d};".format(int(value))'
  evalresponse: 'int(value[2:5])'
#end

#define voice-monitor-level-slider
- item: slider
  label: Monitor Level
  orient: vertical
  from: 100
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"ML2{:03d};".format(int(value))'
  evalresponse: 'int(value[3:6])'
#end

#define auto-notch-group
- item: group
  label: Auto Notch
  contains: #{
    #include main-auto-notch-togglebutton
    #include sub-auto-notch-togglebutton
  #}
#end

#define main-auto-notch-togglebutton
- item: togglebutton
  label: Main
  leading: 0
  selections: #{
    - { text: "Off", cmd: NA0; }
    - { text:  "On", cmd: NA1; }
  #}
#end

#define sub-auto-notch-togglebutton
- item: togglebutton
  label: Sub
  leading: 0
  selections: #{
    - { text: "Off", cmd: NA$0; }
    - { text:  "On", cmd: NA$1; }
  #}
#end

#define noise-blanker-group
- item: group
  label: NB
  contains: #{
    #include main-noise-blanker-group
    #include sub-noise-blanker-group
  #}
#end

#define main-noise-blanker-group
- item: group
  label: Main
  leading: 0
  columns: 1
  contains: #{
    #include main-noise-blanker-togglebutton
    #include main-noise-blanker-slider
  #}
#end

#define sub-noise-blanker-group
- item: group
  label: Sub
  leading: 0
  columns: 1
  contains: #{
    #include sub-noise-blanker-togglebutton
    #include sub-noise-blanker-slider
  #}
#end
  
#define main-noise-blanker-togglebutton
- item: togglebutton
  selections: #{
    - { text: "On",  cmd: NB1;, evalresponse: 'value if len(value) < 5 else value[0:2]+value[4]+";"' } 
    - { text: "Off", cmd: NB0;, evalresponse: 'value if len(value) < 5 else value[0:2]+value[4]+";"' }
  #}
#end

#define sub-noise-blanker-togglebutton
- item: togglebutton
  selections: #{
    - { text: "On",  cmd: NB$1;, evalresponse: 'value if len(value) < 6 else value[0:3]+value[5]+";"' } 
    - { text: "Off", cmd: NB$0;, evalresponse: 'value if len(value) < 6 else value[0:3]+value[5]+";"' }
  #}
#end

#define main-noise-blanker-slider
- item: slider
  orient: vertical
  from: 15
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"NB{v:02d}{on};".format(v=int(value), on=0 if self.k4param("NB") == None else self.k4param("NB")[0] if len(self.k4param("NB")) < 2 else self.k4param("NB")[2])'
  evalresponse: '-1 if len(value) < 5 else int(value[2:4])'
#end

#define sub-noise-blanker-slider
- item: slider
  orient: vertical
  from: 15
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"NB${v:02d}{on};".format(v=int(value), on=0 if self.k4param("NB$") == None else self.k4param("NB$")[0] if len(self.k4param("NB$")) < 2 else self.k4param("NB$")[2])'
  evalresponse: '-1 if len(value) < 6 else int(value[3:5])'
#end

#define noise-reduction-group
- item: group
  label: NR
  contains: #{
    #include main-noise-reduction-group
    #include sub-noise-reduction-group
  #}
#end

#define main-noise-reduction-group
- item: group
  label: Main
  leading: 0
  columns: 1
  contains: #{
    #include main-noise-reduction-togglebutton
    #include main-noise-reduction-slider
  #}
#end

#define sub-noise-reduction-group
- item: group
  label: Sub
  leading: 0
  columns: 1
  contains: #{
    #include sub-noise-reduction-togglebutton
    #include sub-noise-reduction-slider
  #}
#end

#define main-noise-reduction-togglebutton
- item: togglebutton
  selections: #{
    - { text: "On",  cmd: NR1;, evalcmd: '"NR{v}1;".format(v=self.k4param("NR")[0:2])', evalresponse: 'value[0:2]+value[4]+";"' } 
    - { text: "Off", cmd: NR0;, evalcmd: '"NR{v}0;".format(v=self.k4param("NR")[0:2])', evalresponse: 'value[0:2]+value[4]+";"' }
  #}
#end

#define sub-noise-reduction-togglebutton
- item: togglebutton
  selections: #{
    - { text: "On",  cmd: NR$1;, evalcmd: '"NR${v}1;".format(v=self.k4param("NR$")[0:2])', evalresponse: 'value[0:3]+value[5]+";"' } 
    - { text: "Off", cmd: NR$0;, evalcmd: '"NR${v}0;".format(v=self.k4param("NR$")[0:2])', evalresponse: 'value[0:3]+value[5]+";"' }
  #}
#end

#define main-noise-reduction-slider
- item: slider
  orient: vertical
  from: 10
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"NR{v:02d}{on};".format(v=int(value), on=0 if self.k4param("NR") == None else self.k4param("NR")[0] if len(self.k4param("NR")) < 2 else self.k4param("NR")[2])'
  evalresponse: '-1 if len(value) < 5 else int(value[2:4])'
#end

#define sub-noise-reduction-slider
- item: slider
  orient: vertical
  from: 10
  to: 0
  length: 150
  evalincrement: '1'
  evalcmd: '"NR${v:02d}{on};".format(v=int(value), on=0 if self.k4param("NR$") == None else self.k4param("NR$")[0] if len(self.k4param("NR$")) < 2 else self.k4param("NR$")[2])'
  evalresponse: '-1 if len(value) < 6 else int(value[3:5])'
#end

#define ctcss-group
- item: group
  label: CTCSS
  columns: 1
  contains: #{
    #include ctcss-togglebutton
    #include ctcss-dropdown-button
  #}
#end

#define ctcss-togglebutton
- item: togglebutton
  selections: #{
    - { text: "On",  cmd: PL1;, evalcmd: '"PL{v}1;".format(v=self.k4param("PL")[0:2])', evalresponse: 'value[0:2]+value[4]+";"' } 
    - { text: "Off", cmd: PL0;, evalcmd: '"PL{v}0;".format(v=self.k4param("PL")[0:2])', evalresponse: 'value[0:2]+value[4]+";"' }
  #}
#end

#define ctcss-dropdown-button
- item: dropdownbutton
  width: 6
  height: 10
  selections: #{
    - { text: " 67.0", cmd: PL01;, evalcmd: '"PL01{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' } 
    - { text: " 69.3", cmd: PL02;, evalcmd: '"PL02{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 71.9", cmd: PL03;, evalcmd: '"PL03{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 74.4", cmd: PL04;, evalcmd: '"PL04{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 77.0", cmd: PL05;, evalcmd: '"PL05{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 79.7", cmd: PL06;, evalcmd: '"PL06{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 82.5", cmd: PL07;, evalcmd: '"PL07{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 85.4", cmd: PL08;, evalcmd: '"PL08{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 88.5", cmd: PL09;, evalcmd: '"PL09{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 91.5", cmd: PL10;, evalcmd: '"PL10{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: " 94.8", cmd: PL11;, evalcmd: '"PL11{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' } 
    - { text: " 97.4", cmd: PL12;, evalcmd: '"PL12{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "100.0", cmd: PL13;, evalcmd: '"PL13{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "103.5", cmd: PL14;, evalcmd: '"PL14{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "107.2", cmd: PL15;, evalcmd: '"PL15{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "110.9", cmd: PL16;, evalcmd: '"PL16{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "114.8", cmd: PL17;, evalcmd: '"PL17{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "118.8", cmd: PL18;, evalcmd: '"PL18{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "123.0", cmd: PL19;, evalcmd: '"PL19{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "127.3", cmd: PL20;, evalcmd: '"PL20{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "131.8", cmd: PL21;, evalcmd: '"PL21{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' } 
    - { text: "136.5", cmd: PL22;, evalcmd: '"PL22{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "141.3", cmd: PL23;, evalcmd: '"PL23{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "146.2", cmd: PL24;, evalcmd: '"PL24{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "151.4", cmd: PL25;, evalcmd: '"PL25{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "156.7", cmd: PL26;, evalcmd: '"PL26{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "159.8", cmd: PL27;, evalcmd: '"PL27{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "162.2", cmd: PL28;, evalcmd: '"PL28{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "165.5", cmd: PL29;, evalcmd: '"PL29{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "167.9", cmd: PL30;, evalcmd: '"PL30{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "171.3", cmd: PL31;, evalcmd: '"PL31{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' } 
    - { text: "173.8", cmd: PL32;, evalcmd: '"PL32{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "177.3", cmd: PL33;, evalcmd: '"PL33{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "179.9", cmd: PL34;, evalcmd: '"PL34{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "183.5", cmd: PL35;, evalcmd: '"PL35{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "186.2", cmd: PL36;, evalcmd: '"PL36{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "189.9", cmd: PL37;, evalcmd: '"PL37{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "192.8", cmd: PL38;, evalcmd: '"PL38{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "196.6", cmd: PL39;, evalcmd: '"PL39{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "199.5", cmd: PL40;, evalcmd: '"PL40{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "203.5", cmd: PL41;, evalcmd: '"PL41{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' } 
    - { text: "206.5", cmd: PL42;, evalcmd: '"PL42{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "210.7", cmd: PL43;, evalcmd: '"PL43{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "218.1", cmd: PL44;, evalcmd: '"PL44{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "225.7", cmd: PL45;, evalcmd: '"PL45{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "229.1", cmd: PL46;, evalcmd: '"PL46{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "233.6", cmd: PL47;, evalcmd: '"PL47{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "241.8", cmd: PL48;, evalcmd: '"PL48{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "250.3", cmd: PL49;, evalcmd: '"PL49{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
    - { text: "254.1", cmd: PL50;, evalcmd: '"PL50{v};".format(v=self.k4param("PL")[2])', evalresponse: 'value[0:4]+";"' }
  #}
#end

#define equalizers
- item: equalizers
  length: 150
#end

#define sw-release-group
- item: group
  label: "Software Release"
  columns: 1
  contains: #{
    #include sw-release-dropdown-button
    #include sw-release-apply-button
  #}
#end

#define sw-release-dropdown-button
- item: dropdownbutton
  width: 13
  justify: left
  selections: #{
    - { text: Production, cmd: RLP; }
    - { text: Beta, cmd: RLB; }
    - { text: "Previous Prod.", cmd: RLX; }
  #}
#end
#define sw-release-apply-button
- item: button
  text: "Apply and\nReboot"
  cmd: PS88;
#end

# preprocessor directives:
#   #define <block_name>
#     - defines a block, <block_name>,  containing all following lines until a #end directive
#       must appear in column 1
#
#   #end
#     - terminates a block definition
#       must appear in column 1
#
#   #include <block_name>
#     - is replaced by the block <block_name>
#       indentation is preserved.

# item descriptions:
#
# server options:
#   name: The name of the server
#   type: The type of the server
#     k4 is required for k4 servers to receive responses
#   address: The ip address of the server
#   port: The port to connect to
#   startup: command(s) to be sent to the server on startup.
#   connect_on_start: if false, do not connect to the server automatically

# page options:
#   name: The page name (required).
#   server: The default server items contained in this page will use
#   columns: The number of columns in which contained items will be displayed.
#   contains: The list of items this page contains
#
#   The first page defined will be the initially displayed page

# group options:
#   label: The label that will be displayed for this group.
#   leading: Specifies the vertical space (in points) that will be displayed
#     before the group. Default is 1 for groups with a label, 0 otherwise.
#   server: The default server items contained in this group will use
#   row: The row of the container in which this group will be placed.
#   column: The column of the container in which this group will be placed.
#   rowspan: The number of rows this group will occupy.
#   columnspan: The number of columns this group will occupy.
#   columns: The number of columns in which contained items will be displayed.
#   tabname: Contains the name displayed on this tab of the containing notebook
#   contains: The list of items this group contains

# button options:
#   leading: the number of "points" of vertical spacing to be added before this item
#   label: surrounds this item with a frame with the specified "label"
#   text: button text
#   font: the font in which the text is to be displayed
#   server: The server name of the server referenced by this button
#   cmd: XXX, where XXX is one of:
#     1. a text string to be sent to k4, or
#     2. a python 'list' object containg server name/cmd pairs (python dict objects)
#        to be sent, i.e. [ k4: k4cmd, s1: s1cmd ] would send 'k4cmd' to server k4, and
#        then send 's1cmd' to server s1.
#     3. a directive (a special command directed at the application, rather than the server):
#       'CONNECT!;', connects to the server if not previously connected
#       'QUIT!;', terminates the program
#       'SHOW!PREVIOUS;', displays the previously-displayed page
#       'SHOW!YYY;', displays page with the name: YYY
#   fg: foreground color
#   bg: background color
#   abg: active background color
#   justify: 'left', 'right', 'center' to justify text within the Button

# togglebutton options:
#   leading: the number of "points" of vertical spacing to be added before this item
#   label: surrounds this item with a frame with the specified "label"
#   wraparound: true or false. whether the button wraps back around to the first selection
#     defaults to true
#   justify: 'left', 'right', 'center' to justify text within the Button
#   selections: a list of selections, each of which may have the following elements
#       text: button text
#       font: the font in which the text is to be displayed
#       server: The server name of the server referenced by this button
#       cmd: XXX, where XXX is one of:
#         1. a text string to be sent to k4; or
#         2. a python 'list' object containg server name/cmd pairs (python dict objects)
#            to be sent, i.e. [ k4: k4cmd, s1: s1cmd ] would send 'k4cmd' to server k4, and
#            then send 's1cmd' to server s1; or
#         3. a directive (a special command directed at the application, rather than the server):
#           'CONNECT!;', connects to the server if not previously connected
#           'QUIT!;', terminates the program
#           'SHOW!PREVIOUS;', displays the previously-displayed page
#           'SHOW!YYY;', displays page with the name: YYY
#       response: When this response is received, the selection will be selected.`
#       evalresponse: A python expression to modify the response received before matching the selection.
#       fg: foreground color
#       bg: background color
#       abg: active background color
#       justify: 'left', 'right', 'center' to justify text within the Button
#       blink: If set to true, the button will blink.

# radiobutton options:
#   leading: the number of "points" of vertical spacing to be added before this item
#   label: surrounds this item with a frame with the specified "label"
#   groupid: a string shared by all buttons in this group, unique to all groups
#   indicator: Set to 0 if no indicator is to be displayed
#   text: button text
#   font: the font in which the text is to be displayed
#   server: The server name of the server referenced by this button
#   cmd: Either:
#     a text string to be sent to k4, or
#     a python 'list' object containg server name/cmd pairs (python dict objects)
#     to be sent, i.e. [ k4: k4cmd, s1: s1cmd ] would send 'k4cmd' to server k4, and
#     then send 's1cmd' to server s1.
#   fg: foreground color
#   bg: background color
#   abg: active background color
#   selectcolor: button color when selected
#   blink: If set to true, the button will blink.

# slider options:
#   leading: the number of "points" of vertical spacing to be added before this item
#   label: surrounds this item with a frame with the specified "label"
#   from: The lowest value of the slider
#   to: The highest value of he slider
#   orient: Either:
#     vertical: Specifies a vertical slider
#     horizontal: Specifies a horizontal slider
#   length: The length of the slider in pixels
#   width: The width in pixels if the slider is verical, otherwise the height
#   increment: A python expression to set the slider increment given the variable value
#   server: The server name of the server referenced by this slider
#   cmdvalue: A python expression to produce the K4 command given the variable 'value'.
#   evalresponse: A python expression to extract the slider value from the K4 response.
#   font: The font used for the slider's text.
#   fg: foreground color
#   bg: background color

# vfo options:
#   leading: the number of "points" of vertical spacing to be added before this item
#   label: surrounds this item with a frame with the specified "label"
#   AorB: 'A' for vfo A and 'B' for vfo B
#   fg: foreground color
#   bg: background color
#   font: the font used for the vfo
#   width: the number of characters in the frequency spinbox
#   step_spinbox: When set to 'true', the vfo step will be selected by a spinbox

# notebook (tabs) options:
# A notebook contains only groups, each selecable by a tab
# Each group it contains must have a tabname option

# bargraph options
#   leading: the number of "points" of vertical spacing to be added before this item
#   label: surrounds this item with a frame with the specified "label"
#   orient: Either:
#     vertical: Specifies a vertical bar graph
#     horizontal: Specifies a horizontal bar graph
#   cmd: Command(s) sent to initiate bar graph responses
#   response: The base for requested responses for the bar graph (defaults to cmd)
#   evalresponse: A python expression to extract the bar graph value from the K4 response.
#   maximum: The maximum value the bar graph may be set to
#   evalmaximum: A python expression to generate the maximum value
#   length: The length of the bar graph in pixels
#   font: the font used for the bar graph texts
#   lefttext: Value of a text label placed to the left of the bar graph
#   bottomtext: Value of a text label placed below the bar graph
#   evalbottomtext: A python expression to generate a text label placed below the bar graph
#   lengthpercent: Length of bar graph as a percentage of the length of bottomtext

# text options
#   leading: the number of "points" of vertical spacing to be added before this item
#   label: surrounds this item with a frame with the specified "label"
#   text: the text to be displayed
#   font: the font in which the text is to be displayed
#   fg: foreground color
#   bg: background color

# menu options:
#   leading: the number of "points" of vertical spacing to be added before this item
#   label: surrounds this item with a frame with the specified "label"
#   entries_displayed: The number of menu items to display at a time
#   fg: foreground color
#   bg: background color
#   abg: active background color
#   afg; active foreround color
#   selectbg: selected background color
#   selectfg: selected foreground color
#   font: the font used for the menu
#   label_font: the font used for the menu's labels
