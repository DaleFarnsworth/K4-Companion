---

# version = "1.1.1"

# A description of the various items is provided at the end of this file.

- item: defaults
  # Colors
  bg: white
  abg: gray
  fg: black
  # afg: black                # non-existent means same as fg
  selectcolor: red            # inherited by radiobutton

  # Font used for labels
  label_font: { family: Helvetica, size: 10, weight: normal }
  # Font used for buttons and other controls
  button_font: { family: Helvetica, size: 10, weight: normal }

- item: server
  name: k4
  type: k4
  address: K4-SNxxxxx.local      # match your serial number in the string
  port: 9200
  startup: TS1;                   # Set test mode
  connect_on_start: True

- item: page
  name: main
  server: k4
  contains: #{
  #include maintab
  #include menutab
  #}
#}

#define maintab
- item: group
  tabname: Main
  contains: #{
  - item: group # Column 1
    columns: 1
    contains: #{
    #include VFO_A_widgets

    - item: group
      contains: #{
      #include tx_rx
      #include Test_mode
      #}

    #include VFOs_group

    - item: group
      contains: #{
      - item: group
        label: ATU
        contains: #{
        #include atu_bypass_auto
        #include atu_tune
        #include atu_extended_tune
        #}
      #}

    - item: group
      contains: #{
      - item: group
        label: Tune
        contains: #{
        #include tune
        #include tunelp
        #}
      #}

    - item: group
      contains: #{
      - item: group
        contains: #{
        #include k4_power_off
        #}
      - item: group
        contains: #{
        #include QUIT
        #}
      #}
    #}
  - item: group # Column 2
    columns: 1
    contains: #{
    #include VFO_B_widgets

    - item: group
      columns: 1
      contains: #{
      - item: group
        contains: #{

        - item: group
          label: Power
          contains: #{
          #include power_slider
          #}

        - item: group
          label: Volume
          contains: #{
          - item: group
            contains: #{
            #include main_volume_slider
            #include sub_volume_slider
            #include sidetone_slider
            #}
          #}

        - item: group
          label: Keyer
          contains: #{
          #include keyer_speed
          #}
        #}
      #include audio_mx
      #}
    #}
  #}
#end

#define menutab
- item: group
  tabname: Menu
  contains: #{
  - item: menu
    entries_displayed: 18
    selectbg: pink
  #}
#end

#define VFO_A_widgets
- item: group
  label: VFO A
  columns: 1
  contains: #{
  #include VFO_A
  #include S_Meter_A
  - item: group
    contains: #{
    - item: group
      contains: #{
      #include rf_out
      #}
    - item: group
      contains: #{
      #include alc
      #}
    #}
  - item: group
    columns: 3
    childwidth: 7
    contains: #{
    #include band_A_dropdown
    #include mode_A_dropdown
    #include bw_A_dropdown
    #include preamp_A_dropdown
    #include atten_A_dropdown
    #include rfgain_A_dropdown
    #}
  #}
#end

#define VFO_A
- { item: vfo, AorB: A, width: 9, font: { family: Helvetica, size: 19, weight: normal }, activecolor: pink, transmitcolor: red }
#end

#define S_Meter_A
- item: group
  leading: 1
  contains: #{
  - item: bargraph
    maximum: 42
    lengthpercent: 96
    cmd: SM1;
    font: { family: DejaVu Sans Mono, size: 6, weight: normal }
    lefttext: ' '
    bottomtext: "S1 2 3 4 5 6 7 8 9  +10 +20 +30 +40 +50 +60"
    response: SM;
    evalresponse: '0 if len(value) < 4 else value.rstrip(";")[2:]'
  #}
#end

#define rf_out
- item: group
  label: Power out
  contains: #{
  - item: bargraph
    evalmaximum: "0 if len(self.k4param('PC')) < 4 else 11.7 if self.k4param('PC')[3] == 'L' else 117"
    lengthpercent: 100
    cmd: TM1;PC;
    font: { family: DejaVu Sans Mono, size: 6, weight: normal }
    lefttext: ''
    evalbottomtext: "'' if len(self.k4param('PC')) < 4 else '0    2    4    6    8   10    ' if self.k4param('PC')[3] == 'L' else '0   20   40   60   80  100    '"
    evalresponse: "0 if len(self.k4param('TM')) < 4 else float(self.k4param('TM')[6:9])/10 if self.k4param('PC')[3] == 'L' else self.k4param('TM')[6:9]"
  #}
#end

#define alc
- item: group
  label: ALC
  contains: #{
  - item: bargraph
    maximum: 8
    lengthpercent: 100
    cmd: TM1;
    font: { family: DejaVu Sans Mono, size: 6, weight: normal }
    lefttext: ''
    bottomtext: "1  3  5  7"
    evalresponse: "0 if len(self.k4param('TM')) < 4 else float(self.k4param('TM')[0:3])"
  #}
#end

#define cmp
- item: group
  label: CMP
  contains: #{
  - item: bargraph
    maximum: 32
    lengthpercent: 100
    cmd: TM1;
    font: { family: DejaVu Sans Mono, size: 6, weight: normal }
    lefttext: ''
    bottomtext: "0 10 20 30"
    evalresponse: "0 if len(self.k4param('TM')) < 4 else float(self.k4param('TM')[3:6])"
  #}
#end

#define swr
- item: group
  label: SWR
  contains: #{
  - item: bargraph
    maximum: 35
    lengthpercent: 100
    cmd: TM1;TQ;TU;
    font: { family: DejaVu Sans Mono, size: 6, weight: normal }
    lefttext: ' '
    bottomtext: "1:1       2:1       3:1    "
    evalresponse: "0 if (len(self.k4param('TM')) < 4) or (self.k4param('TU') == None) or ((self.k4param('TQ') == '0') and (self.k4param('TU') == '0')) else float(self.k4param('TM')[9:12])-10"
  #}
#end

#define band_A_dropdown
- item: group
  label: Band
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: "  6 m", cmd: BN10; }
    - { text: " 10 m", cmd: BN09; }
    - { text: " 12 m", cmd: BN08; }
    - { text: " 15 m", cmd: BN07; }
    - { text: " 17 m", cmd: BN06; }
    - { text: " 20 m", cmd: BN05; }
    - { text: " 30 m", cmd: BN04; }
    - { text: " 40 m", cmd: BN03; }
    - { text: " 60 m", cmd: BN02; }
    - { text: " 80 m", cmd: BN01; }
    - { text: "160 m", cmd: BN00; }
    #}
  #}
#end

#define mode_A_dropdown
- item: group
  label: Mode
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: "  CW", cmd: MD3; }
    - { text: " USB", cmd: MD2; }
    - { text: " LSB", cmd: MD1; }
    - { text: "  AM", cmd: MD5; }
    - { text: "  FM", cmd: MD4; }
    - { text: "DATA", cmd: MD6; }
    #}
  #}
#end

#define bw_A_dropdown
- item: group
  label: BW
  contains: #{
  - item: dropdownbutton
    unexpectedresponse: 'str((float(value[2:6])*10))[0:3]+" Hz" if value[2:4]=="00" else "{a:.2f}".format(a=float(value[2:6])/100)+" kHz"'
    selections: #{
    - { text: "   50 Hz", cmd: BW0005; }
    - { text: "  100 Hz", cmd: BW0010; }
    - { text: "  200 Hz", cmd: BW0020; }
    - { text: "  300 Hz", cmd: BW0030; }
    - { text: "  400 Hz", cmd: BW0040; }
    - { text: "  450 Hz", cmd: BW0045; }
    - { text: "  500 Hz", cmd: BW0050; }
    - { text: "1.80 kHz", cmd: BW0180; }
    - { text: "2.50 kHz", cmd: BW0250; }
    - { text: "3.50 kHz", cmd: BW0350; }
    - { text: "4.00 kHz", cmd: BW0400; }
    #}
  #}
#end

#define preamp_A_dropdown
- item: group
  label: Preamp
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: "0", cmd: PA00; }
    - { text: "1", cmd: PA11; }
    - { text: "2", cmd: PA21; }
    - { text: "3", cmd: PA31; }
    #}
  #}
#end

#define atten_A_dropdown
- item: group
  label: Attenuation
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: " 0 dB", cmd: RA000; }
    - { text: " 3 dB", cmd: RA031; }
    - { text: " 6 dB", cmd: RA061; }
    - { text: " 9 dB", cmd: RA091; }
    - { text: "12 dB", cmd: RA121; }
    - { text: "15 dB", cmd: RA151; }
    - { text: "18 dB", cmd: RA181; }
    - { text: "21 dB", cmd: RA211; }
    #}
  #}
#end

#define rfgain_A_dropdown
- item: group
  label: RF Gain
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: " -0 ", cmd: RG-00; }
    - { text: "-10 ", cmd: RG-10; }
    #}
  #}
#end

#define VFO_B_widgets
- item: group
  label: VFO B
  columns: 1
  contains: #{
  #include VFO_B
  #include S_Meter_B
  - item: group
    contains: #{
    - item: group
      contains: #{
      #include swr
      #}
    - item: group
      contains: #{
      #include cmp
      #}
    #}
  - item: group
    columns: 3
    childwidth: 7
    contains: #{
    #include band_B_dropdown
    #include mode_B_dropdown
    #include bw_B_dropdown
    #include preamp_B_dropdown
    #include atten_B_dropdown
    #include rfgain_B_dropdown
    #}
  #}
#end

#define VFO_B
- { item: vfo, AorB: B, width: 9, font: { family: Helvetica, size: 19, weight: normal }, activecolor: pink, transmitcolor: red }
#end

#define S_Meter_B
- item: group
  leading: 1
  contains: #{
  - item: bargraph
    maximum: 42
    lengthpercent: 96
    cmd: SM1;
    font: { family: DejaVu Sans Mono, size: 6, weight: normal }
    lefttext: ' '
    bottomtext: "S1 2 3 4 5 6 7 8 9  +10 +20 +30 +40 +50 +60"
    response: SM$;
    evalresponse: '0 if len(value) < 5 else value.rstrip(";")[3:]'
  #}
#end

#define band_B_dropdown
- item: group
  label: Band
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: "  6 m", cmd: BN$10; }
    - { text: " 10 m", cmd: BN$09; }
    - { text: " 12 m", cmd: BN$08; }
    - { text: " 15 m", cmd: BN$07; }
    - { text: " 17 m", cmd: BN$06; }
    - { text: " 20 m", cmd: BN$05; }
    - { text: " 30 m", cmd: BN$04; }
    - { text: " 40 m", cmd: BN$03; }
    - { text: " 60 m", cmd: BN$02; }
    - { text: " 80 m", cmd: BN$01; }
    - { text: "160 m", cmd: BN$00; }
    #}
  #}
#end

#define mode_B_dropdown
- item: group
  label: Mode
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: "  CW", cmd: MD$3; }
    - { text: " USB", cmd: MD$2; }
    - { text: " LSB", cmd: MD$1; }
    - { text: "  AM", cmd: MD$5; }
    - { text: "  FM", cmd: MD$4; }
    - { text: "DATA", cmd: MD$6; }
    #}
  #}
#end

#define bw_B_dropdown
- item: group
  label: BW
  contains: #{
  - item: dropdownbutton
    unexpectedresponse: 'str((float(value[3:7])*10))[0:3]+" Hz" if value[2:4]=="00" else "{a:.2f}".format(a=float(value[3:7])/100)+" kHz"'
    selections: #{
    - { text: "   50 Hz", cmd: BW$0005; }
    - { text: "  100 Hz", cmd: BW$0010; }
    - { text: "  200 Hz", cmd: BW$0020; }
    - { text: "  300 Hz", cmd: BW$0030; }
    - { text: "  400 Hz", cmd: BW$0040; }
    - { text: "  450 Hz", cmd: BW$0045; }
    - { text: "  500 Hz", cmd: BW$0050; }
    - { text: "1.80 kHz", cmd: BW$0180; }
    - { text: "2.50 kHz", cmd: BW$0250; }
    - { text: "3.50 kHz", cmd: BW$0350; }
    - { text: "4.00 kHz", cmd: BW$0400; }
    #}
  #}
#end

#define preamp_B_dropdown
- item: group
  label: Preamp
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: "0", cmd: PA$00; }
    - { text: "1", cmd: PA$11; }
    - { text: "2", cmd: PA$21; }
    - { text: "3", cmd: PA$31; }
    #}
  #}
#end

#define atten_B_dropdown
- item: group
  label: Attenuation
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: " 0 dB", cmd: RA$000; }
    - { text: " 3 dB", cmd: RA$031; }
    - { text: " 6 dB", cmd: RA$061; }
    - { text: " 9 dB", cmd: RA$091; }
    - { text: "12 dB", cmd: RA$121; }
    - { text: "15 dB", cmd: RA$151; }
    - { text: "18 dB", cmd: RA$181; }
    - { text: "21 dB", cmd: RA$211; }
    #}
  #}
#end

#define rfgain_B_dropdown
- item: group
  label: RF Gain
  contains: #{
  - item: dropdownbutton
    selections: #{
    - { text: " -0 ", cmd: RG$-00; }
    - { text: "-10 ", cmd: RG$-10; }
    #}
  #}
#end

#define VFOs_group
- item: group
  label: VFOs
  columns: 3
  contains: #{
  #include VFOs_Linked
  #include split
  #include subrcvr
  #include AB_swap_buttons
  #}
#end

#define VFOs_Linked
- item: togglebutton
  selections: #{
  - { text: "  Linked", cmd: FT0;BI0;#DPM0; }
  - { text: "Unlinked", cmd: FT0;BI1;#DPM2; }
  #}
#end

#define VFOs_Locked
- item: togglebutton
  selections: #{
  - { text: "  Locked", cmd: LK1;LK$1;, }
  - { text: "Unlocked", cmd: LK0;LK$0;, }
  #}
#end

#define Test_mode
- item: group
  label: Tx
  contains: #{
  - item: togglebutton
    selections: #{
    - { text: "Test On",  cmd: TS1;, bg: red, abg: red }
    - { text: "Test Off", cmd: TS0;,  }
    #}
  #}
#end

#define power_dropdown
- item: group
  label: Power
  contains: #{
  - item: dropdownbutton
    width: 6
    unexpectedresponse: 'str("" if len(value) < 5 else float(value[2:5])/10 if value[5] == "L" else float(value[2:5])/10000 if value[5] == "X" else float(value[2:5])) + " W"'
    selections: #{
    - { text: "  5 W", cmd: PC050L; }
    - { text: " 10 W", cmd: PC100L; }
    - { text: " 25 W", cmd: PC025H; }
    - { text: " 50 W", cmd: PC050H; }
    - { text: " 75 W", cmd: PC075H; }
    - { text: "100 W", cmd: PC100H; }
    #}
  #}
#end

#define power_slider
- item: group
  leading: 0
  label: (Watts)
  contains: #{
  - item: slider
    orient: vertical
    from: 110.0
    to: 0.0
    length: 150
    evalincrement: '.0001 if value > 0.0 and value <= .01 else .1 if value <= 10.0 else 1.0'
    evalcmd: '"PC{:03d}L;".format(int(float(value)*10)) if float(value) <= 10.0 else "PC{:03d}H;".format(int(value))'
    evalresponse: '0 if len(value) < 5 else float(value[2:5])/10 if value[5] == "L" else float(value[2:5])/10000 if value[5] == "X" else float(value[2:5])'
  #}
#end

#define main_volume_slider
- item: group
  leading: 0
  label: Main
  contains: #{
  - item: slider
    orient: vertical
    from: 60
    to: 0
    length: 150
    evalincrement: '1'
    evalcmd: '"AG{:03d};".format(int(value))'
    evalresponse: 'float(value[2:5])'
  #}
#end

#define sub_volume_slider
- item: group
  leading: 0
  label: Sub
  contains: #{
  - item: slider
    orient: vertical
    from: 60
    to: 0
    length: 150
    evalincrement: '1'
    evalcmd: '"AG${:03d};".format(int(value))'
    evalresponse: 'float(value[3:6])'
  #}
#end

#define sidetone_slider
- item: group
  leading: 0
  label: Sidetone
  contains: #{
  - item: slider
    orient: vertical
    from: 60
    to: 0
    length: 150
    evalincrement: '1'
    evalcmd: '"ML0{:03d};".format(int(float(value)))'
    evalresponse: 'float(value[3:6])'
  #}
#end

#define keyer_speed
- item: group
  leading: 0
  label: Speed
  contains: #{
  - item: slider
    orient: vertical
    from: 100
    to: 8
    length: 150
    evalincrement: '1'
    evalcmd: '"KS{:03d};".format(int(float(value)))'
    evalresponse: 'float(value[2:5])'
  #}
#end

#define atu_bypass_auto
- item: togglebutton
  selections: #{
    - { text: "Bypass", cmd: AT1; }
    - { text: "Auto",   cmd: AT2; }
  #}
#end

#define audio_mx
- item: group
  label: Audio Mix
  contains: #{
  - item: togglebutton
    selections: #{
    - { text: "Audio A+B", cmd: MXA.B; }
    - { text: "Audio A",   cmd: MXA.A; }
    - { text: "Audio B",   cmd: MXB.B }
    #}
  #}
#end

#define atu_tune
- item: togglebutton
  selections: #{
  - { text: "Tune", cmd: TU3;, bg: red }
  - { text: "Tune", cmd: TU0; }
  #}
#end

#define atu_extended_tune
- item: togglebutton
  selections: #{
  - { text: "TUNE", cmd: TU4;, bg: red }
  - { text: "TUNE", cmd: TU0; }
  #}
#end

#define tune
- item: togglebutton
  selections: #{
  - { text: "Tune", cmd: TU1;, bg: red }
  - { text: "Tune", cmd: TU0; }
  #}
#end

#define tunelp
- item: togglebutton
  selections: #{
  - { text: "Tune LP", cmd: TU2;, bg: red }
  - { text: "Tune LP", cmd: TU0; }
  #}
#end

#define AB_swap_buttons
- { item: button, text: "A/B",      cmd:  AB2; }
- { item: button, text: "A->B",     cmd:  AB0; }
- { item: button, text: "B->A",     cmd:  AB1; }
- { item: button, text: "all A/B",  cmd:  AB5; }
- { item: button, text: "all A->B", cmd:  AB3; }
- { item: button, text: "all B->A", cmd:  AB4; }
#end

#define k4_power_off
- { item: button, text: 'Power Off', cmd:  PS0; }
#end

#define connect
- item: togglebutton
  wraparound: False
  selections: #{
  - { text: 'Connect', cmd: k4;, response: k41;, bg: red, abg: red, blink: on }
  - { text: 'Connected', directive: connect }
  #}
#end

#define QUIT
- { item: button, text: 'Exit', directive:  quit }
#end

#define split
- item: togglebutton
  selections: #{
  - { text: 'Split on',   cmd: FT1;, bg: yellow, abg: yellow }
  - { text: 'Split off' , cmd: FT0; }
  #}
#end

#define subrcvr
- item: togglebutton
  selections: #{
  - { text: 'Sub on',   cmd: SB1; }
  - { text: 'Sub off' , cmd: SB0; }
  #}
#end

#define tx_rx
- item: group
  label: 'Tx/Rx '
  contains: #{
  - item: togglebutton
    selections: #{
    - { text: 'Receive',   cmd: RX;TQ;, bg: white, abg: white, response: TQ0; }
    - { text: 'Transmit',  cmd: TX;TQ;, bg: red,   abg: red,   response: TQ1; }
    #}
  #}
#end

# preprocessor directives:
#   #define <block_name>
#     - defines a block, <block_name>,  containing all following lines until a #end directive
#       must appear in column 1
#
#   #end
#     - terminates a block definition
#       must appear in column 1
#
#   #include <block_name>
#     - is replaced by the block <block_name>
#       indentation is preserved.

# item descriptions:
#
# server options:
#   name: The name of the server
#   type: The type of the server
#     k4 is required for k4 servers to receive responses
#   address: The ip address of the server
#   port: The port to connect to
#   startup: command(s) to be sent to the server on startup.
#   connect_on_start: if false, do not connect to the server automatically

# page options:
#   name: The page name (required).
#   server: The default server items contained in this page will use
#   columns: The number of columns in which contained items will be displayed.
#   contains: The list of items this page contains
#
#   The first page defined will be the initially displayed page

# group options:
#   label: The label that will be displayed for this group.
#   leading: Specifies the vertical space (in points) that will be displayed
#     before the group. Default is 1 for groups with a label, 0 otherwise.
#   server: The default server items contained in this group will use
#   row: The row of the container in which this group will be placed.
#   column: The column of the container in which this group will be placed.
#   rowspan: The number of rows this group will occupy.
#   columnspan: The number of columns this group will occupy.
#   columns: The number of columns in which contained items will be displayed.
#   tabname: Contains the name displayed on this tab of the containing notebook
#   contains: The list of items this group contains

# button options:
#   text: button text
#   server: The server name of the server referenced by this button
#   cmd: Either:
#     a text string to be sent to k4, or
#     a python 'list' object containg server name/cmd pairs (python dict objects)
#     to be sent, i.e. [ k4: k4cmd, s1: s1cmd ] would send 'k4cmd' to server k4, and
#     then send 's1cmd' to server s1.
#   directive:
#     'connect', connects to the server if not previously connected
#     'quit', terminates the program
#     'show_previous_page', displays the previously-displayed page
#     'show_page XXX', displays page with the name: XXX
#   fg: foreground color
#   bg: background color
#   abg: active background color
#   justify: 'left', 'right', 'center' to justify text within the Button

# togglebutton options:
#   wraparound: true or false. whether the button wraps back around to the first selection
#     defaults to true
#   justify: 'left', 'right', 'center' to justify text within the Button
#   selections: a list of selections, each of which may have the following elements
#       text: button text
#       server: The server name of the server referenced by this button
#       cmd: Either:
#         a text string to be sent to k4, or
#         a python 'list' object containg server name/cmd pairs (python dict objects)
#         to be sent, i.e. [ k4: k4cmd, s1: s1cmd ] would send 'k4cmd' to server k4, and
#         then send 's1cmd' to server s1.
#       fg: foreground color
#       bg: background color
#       abg: active background color
#       justify: 'left', 'right', 'center' to justify text within the Button
#       blink: If set to true, the button will blink.

# radiobutton options:
#   groupid: a string shared by all buttons in this group, unique to all groups
#   indicator: Set to 0 if no indicator is to be displayed
#   text: button text
#   server: The server name of the server referenced by this button
#   cmd: Either:
#     a text string to be sent to k4, or
#     a python 'list' object containg server name/cmd pairs (python dict objects)
#     to be sent, i.e. [ k4: k4cmd, s1: s1cmd ] would send 'k4cmd' to server k4, and
#     then send 's1cmd' to server s1.
#   fg: foreground color
#   bg: background color
#   abg: active background color
#   selectcolor: button color when selected
#   blink: If set to true, the button will blink.

# slider options:
#   from: The lowest value of the slider
#   to: The highest value of he slider
#   orient: Either:
#     vertical: Specifies a vertical slider
#     horizontal: Specifies a horizontal slider
#   length: The length of the slider in pixels
#   width: The width in pixels if the slider is verical, otherwise the height
#   increment: A python expression to set the slider increment given the variable value
#   server: The server name of the server referenced by this slider
#   cmdvalue: A python expression to produce the K4 command given the variable 'value'.
#   evalresponse: A python expression to extract the slider value from the K4 response.
#   font: The font used for the slider's text.
#   fg: foreground color
#   bg: background color

# vfo options:
#   AorB: 'A' for vfo A and 'B' for vfo B
#   fg: foreground color
#   bg: background color
#   font: the font used for the vfo
#   width: the number of characters in the frequency spinbox
#   step_spinbox: When set to 'true', the vfo step will be selected by a spinbox

# notebook (tabs) options:
# A notebook contains only groups, each selecable by a tab
# Each group it contains must have a tabname option

# bargraph options
#   orient: Either:
#     vertical: Specifies a vertical bar graph
#     horizontal: Specifies a horizontal bar graph
#   cmd: Command(s) sent to initiate bar graph responses
#   response: The base for requested responses for the bar graph (defaults to cmd)
#   evalresponse: A python expression to extract the bar graph value from the K4 response.
#   maximum: The maximum value the bar graph may be set to
#   evalmaximum: A python expression to generate the maximum value
#   length: The length of the bar graph in pixels
#   font: the font used for the bar graph texts
#   lefttext: Value of a text label placed to the left of the bar graph
#   bottomtext: Value of a text label placed below the bar graph
#   evalbottomtext: A python expression to generate a text label placed below the bar graph
#   lengthpercent: Length of bar graph as a percentage of the length of bottomtext

# menu options:
#   entries_displayed: The number of menu items to display at a time
#   fg: foreground color
#   bg: background color
#   abg: active background color
#   afg; active foreround color
#   selectbg: selected background color
#   selectfg: selected foreground color
#   font: the font used for the menu
#   label_font: the font used for the menu's labels
